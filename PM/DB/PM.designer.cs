#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PM.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PM")]
	public partial class PMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContacts(Contacts instance);
    partial void UpdateContacts(Contacts instance);
    partial void DeleteContacts(Contacts instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertLookup(Lookup instance);
    partial void UpdateLookup(Lookup instance);
    partial void DeleteLookup(Lookup instance);
    partial void InsertDocumentFolders(DocumentFolders instance);
    partial void UpdateDocumentFolders(DocumentFolders instance);
    partial void DeleteDocumentFolders(DocumentFolders instance);
    partial void InsertAppSettings(AppSettings instance);
    partial void UpdateAppSettings(AppSettings instance);
    partial void DeleteAppSettings(AppSettings instance);
    #endregion
		
		public PMDataContext() : 
				base(global::PM.Properties.Settings.Default.PMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contacts> Contacts
		{
			get
			{
				return this.GetTable<Contacts>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Lookup> Lookups
		{
			get
			{
				return this.GetTable<Lookup>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFolders> DocumentFolders
		{
			get
			{
				return this.GetTable<DocumentFolders>();
			}
		}
		
		public System.Data.Linq.Table<AppSettings> AppSettings
		{
			get
			{
				return this.GetTable<AppSettings>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_CreateDefaultDocumentFolders")]
		public int sp_CreateDefaultDocumentFolders([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CustomerID", DbType="Int")] System.Nullable<int> customerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fn_GetDocumentFolderCountForCustomer", IsComposable=true)]
		public System.Nullable<int> fn_GetDocumentFolderCountForCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CustomerID", DbType="Int")] System.Nullable<int> customerID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_SaveDocumentFolders")]
		public int sp_SaveDocumentFolders([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CustomerID", DbType="Int")] System.Nullable<int> customerID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentID", DbType="Int")] System.Nullable<int> parentID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FolderName", DbType="NVarChar(1000)")] string folderName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsStarred", DbType="Bit")] System.Nullable<bool> isStarred, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsHidden", DbType="Bit")] System.Nullable<bool> isHidden)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, customerID, parentID, folderName, isStarred, isHidden);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_DeleteDocumentFolder")]
		public int sp_DeleteDocumentFolder([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contacts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _IsActive;
		
		private int _CustomerID;
		
		private string _ContactItemType;
		
		private string _ContactItemValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnContactItemTypeChanging(string value);
    partial void OnContactItemTypeChanged();
    partial void OnContactItemValueChanging(string value);
    partial void OnContactItemValueChanged();
    #endregion
		
		public Contacts()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactItemType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContactItemType
		{
			get
			{
				return this._ContactItemType;
			}
			set
			{
				if ((this._ContactItemType != value))
				{
					this.OnContactItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ContactItemType = value;
					this.SendPropertyChanged("ContactItemType");
					this.OnContactItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactItemValue", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ContactItemValue
		{
			get
			{
				return this._ContactItemValue;
			}
			set
			{
				if ((this._ContactItemValue != value))
				{
					this.OnContactItemValueChanging(value);
					this.SendPropertyChanging();
					this._ContactItemValue = value;
					this.SendPropertyChanged("ContactItemValue");
					this.OnContactItemValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _INSERT_TIMESTAMP;
		
		private string _INSERT_USER;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _OpeningDate;
		
		private string _CustomerType;
		
		private string _CustomerName;
		
		private string _Personal_Gender;
		
		private System.Nullable<System.DateTime> _Personal_BirthDate;
		
		private string _Personal_SSN;
		
		private string _Personal_LicenseID;
		
		private string _Business_TypeOfCompany;
		
		private string _Business_TaxID;
		
		private string _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnINSERT_TIMESTAMPChanging(System.DateTime value);
    partial void OnINSERT_TIMESTAMPChanged();
    partial void OnINSERT_USERChanging(string value);
    partial void OnINSERT_USERChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnOpeningDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpeningDateChanged();
    partial void OnCustomerTypeChanging(string value);
    partial void OnCustomerTypeChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnPersonal_GenderChanging(string value);
    partial void OnPersonal_GenderChanged();
    partial void OnPersonal_BirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonal_BirthDateChanged();
    partial void OnPersonal_SSNChanging(string value);
    partial void OnPersonal_SSNChanged();
    partial void OnPersonal_LicenseIDChanging(string value);
    partial void OnPersonal_LicenseIDChanged();
    partial void OnBusiness_TypeOfCompanyChanging(string value);
    partial void OnBusiness_TypeOfCompanyChanged();
    partial void OnBusiness_TaxIDChanging(string value);
    partial void OnBusiness_TaxIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INSERT_TIMESTAMP", DbType="DateTime NOT NULL")]
		public System.DateTime INSERT_TIMESTAMP
		{
			get
			{
				return this._INSERT_TIMESTAMP;
			}
			set
			{
				if ((this._INSERT_TIMESTAMP != value))
				{
					this.OnINSERT_TIMESTAMPChanging(value);
					this.SendPropertyChanging();
					this._INSERT_TIMESTAMP = value;
					this.SendPropertyChanged("INSERT_TIMESTAMP");
					this.OnINSERT_TIMESTAMPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INSERT_USER", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string INSERT_USER
		{
			get
			{
				return this._INSERT_USER;
			}
			set
			{
				if ((this._INSERT_USER != value))
				{
					this.OnINSERT_USERChanging(value);
					this.SendPropertyChanging();
					this._INSERT_USER = value;
					this.SendPropertyChanged("INSERT_USER");
					this.OnINSERT_USERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpeningDate", DbType="Date")]
		public System.Nullable<System.DateTime> OpeningDate
		{
			get
			{
				return this._OpeningDate;
			}
			set
			{
				if ((this._OpeningDate != value))
				{
					this.OnOpeningDateChanging(value);
					this.SendPropertyChanging();
					this._OpeningDate = value;
					this.SendPropertyChanged("OpeningDate");
					this.OnOpeningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Personal_Gender", DbType="NVarChar(100)")]
		public string Personal_Gender
		{
			get
			{
				return this._Personal_Gender;
			}
			set
			{
				if ((this._Personal_Gender != value))
				{
					this.OnPersonal_GenderChanging(value);
					this.SendPropertyChanging();
					this._Personal_Gender = value;
					this.SendPropertyChanged("Personal_Gender");
					this.OnPersonal_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Personal_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> Personal_BirthDate
		{
			get
			{
				return this._Personal_BirthDate;
			}
			set
			{
				if ((this._Personal_BirthDate != value))
				{
					this.OnPersonal_BirthDateChanging(value);
					this.SendPropertyChanging();
					this._Personal_BirthDate = value;
					this.SendPropertyChanged("Personal_BirthDate");
					this.OnPersonal_BirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Personal_SSN", DbType="NVarChar(100)")]
		public string Personal_SSN
		{
			get
			{
				return this._Personal_SSN;
			}
			set
			{
				if ((this._Personal_SSN != value))
				{
					this.OnPersonal_SSNChanging(value);
					this.SendPropertyChanging();
					this._Personal_SSN = value;
					this.SendPropertyChanged("Personal_SSN");
					this.OnPersonal_SSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Personal_LicenseID", DbType="NVarChar(100)")]
		public string Personal_LicenseID
		{
			get
			{
				return this._Personal_LicenseID;
			}
			set
			{
				if ((this._Personal_LicenseID != value))
				{
					this.OnPersonal_LicenseIDChanging(value);
					this.SendPropertyChanging();
					this._Personal_LicenseID = value;
					this.SendPropertyChanged("Personal_LicenseID");
					this.OnPersonal_LicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Business_TypeOfCompany", DbType="NVarChar(100)")]
		public string Business_TypeOfCompany
		{
			get
			{
				return this._Business_TypeOfCompany;
			}
			set
			{
				if ((this._Business_TypeOfCompany != value))
				{
					this.OnBusiness_TypeOfCompanyChanging(value);
					this.SendPropertyChanging();
					this._Business_TypeOfCompany = value;
					this.SendPropertyChanged("Business_TypeOfCompany");
					this.OnBusiness_TypeOfCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Business_TaxID", DbType="NVarChar(100)")]
		public string Business_TaxID
		{
			get
			{
				return this._Business_TaxID;
			}
			set
			{
				if ((this._Business_TaxID != value))
				{
					this.OnBusiness_TaxIDChanging(value);
					this.SendPropertyChanging();
					this._Business_TaxID = value;
					this.SendPropertyChanged("Business_TaxID");
					this.OnBusiness_TaxIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(4000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lookups")]
	public partial class Lookup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _LookupType;
		
		private int _SortOrder;
		
		private string _LookupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLookupTypeChanging(string value);
    partial void OnLookupTypeChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnLookupNameChanging(string value);
    partial void OnLookupNameChanged();
    #endregion
		
		public Lookup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookupType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LookupType
		{
			get
			{
				return this._LookupType;
			}
			set
			{
				if ((this._LookupType != value))
				{
					this.OnLookupTypeChanging(value);
					this.SendPropertyChanging();
					this._LookupType = value;
					this.SendPropertyChanged("LookupType");
					this.OnLookupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookupName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LookupName
		{
			get
			{
				return this._LookupName;
			}
			set
			{
				if ((this._LookupName != value))
				{
					this.OnLookupNameChanging(value);
					this.SendPropertyChanging();
					this._LookupName = value;
					this.SendPropertyChanged("LookupName");
					this.OnLookupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentFolders")]
	public partial class DocumentFolders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private bool _IsActive;
		
		private int _CustomerID;
		
		private System.Nullable<int> _ParentID;
		
		private string _FolderName;
		
		private bool _IsStarred;
		
		private bool _IsHidden;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnFolderNameChanging(string value);
    partial void OnFolderNameChanged();
    partial void OnIsStarredChanging(bool value);
    partial void OnIsStarredChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    #endregion
		
		public DocumentFolders()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderName", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string FolderName
		{
			get
			{
				return this._FolderName;
			}
			set
			{
				if ((this._FolderName != value))
				{
					this.OnFolderNameChanging(value);
					this.SendPropertyChanging();
					this._FolderName = value;
					this.SendPropertyChanged("FolderName");
					this.OnFolderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStarred", DbType="Bit NOT NULL")]
		public bool IsStarred
		{
			get
			{
				return this._IsStarred;
			}
			set
			{
				if ((this._IsStarred != value))
				{
					this.OnIsStarredChanging(value);
					this.SendPropertyChanging();
					this._IsStarred = value;
					this.SendPropertyChanged("IsStarred");
					this.OnIsStarredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Bit NOT NULL")]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppSettings")]
	public partial class AppSettings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SettingsName;
		
		private string _SettingsValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSettingsNameChanging(string value);
    partial void OnSettingsNameChanged();
    partial void OnSettingsValueChanging(string value);
    partial void OnSettingsValueChanged();
    #endregion
		
		public AppSettings()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SettingsName
		{
			get
			{
				return this._SettingsName;
			}
			set
			{
				if ((this._SettingsName != value))
				{
					this.OnSettingsNameChanging(value);
					this.SendPropertyChanging();
					this._SettingsName = value;
					this.SendPropertyChanged("SettingsName");
					this.OnSettingsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsValue", DbType="NVarChar(1000)")]
		public string SettingsValue
		{
			get
			{
				return this._SettingsValue;
			}
			set
			{
				if ((this._SettingsValue != value))
				{
					this.OnSettingsValueChanging(value);
					this.SendPropertyChanging();
					this._SettingsValue = value;
					this.SendPropertyChanged("SettingsValue");
					this.OnSettingsValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
